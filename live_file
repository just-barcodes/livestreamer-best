#!/usr/bin/env python

import sys
import subprocess
import argparse
import time

parser = argparse.ArgumentParser(description='Livestreamer wrapper')
parser.add_argument('stream', nargs='?', default=None,
                    help='Stream address')
parser.add_argument('-c', '--chat', action='store_true',
                    help='Open chat in browser')
parser.add_argument('-d', '--no-edit', action='store_true',
                    help='Do not try to modify stream address')
parser.add_argument('-z', '--no-stream', action='store_true',
                    help='Do not start the stream (only open chat, if the -c option is present)')
parser.add_argument('-t', '--retry', nargs=2, type=int, metavar=('repeat', 'sleep'),
                    help='Retry starting the stream "repeat" times with "sleep" seconds in between')
parser.add_argument('-q', '--quality', nargs=1,
                    help='Choose quality (mobile / low / medium / high / source)')

args = parser.parse_args()
stream = args.stream

if not stream:
    try:
        clipboard = subprocess.check_output('xclip -selection clipboard -o', shell=True)
    except subprocess.CalledProcessError:
        print('Buffer did not contain an adress!')
        parser.print_help()
        sys.exit(1)  # exit failure
    print('Buffer contained the following address: {}'.format(clipboard))
    stream = clipboard

if not 'http' in stream or ';' in stream:  # prevent accidents
    print('Bad address: {}'.format(stream))
    parser.print_help()
    sys.exit(1)  # exit failure

if not args.no_edit:
    stream = stream.replace('?channel=', '')

if args.chat:
    chat = stream + '/chat'
    if not args.no_edit and 'player.' in stream:
        chat = chat.replace('player.', '')
    print('Opening chat ({})'.format(chat))
    proc = subprocess.Popen(['chromium-browser {} --incognito'.format(chat)], shell=True,
                            stderr=subprocess.PIPE, stdout=subprocess.PIPE,
                            stdin=subprocess.PIPE, close_fds=True)

if args.quality:
    quality = args.quality[0]
else:
    quality = 'best'

if not args.no_stream:
    print('Using following address: {}'.format(stream))
    try:
        retcode = subprocess.call('livestreamer {} {}'.format(stream, quality), shell=True)
        retry_num = 0
        while retcode == 1 and args.retry and retry_num < args.retry[0]:
            print('Waiting {} seconds to retry...'.format(args.retry[1]))
            time.sleep(args.retry[1])
            retcode = subprocess.call('livestreamer {} {}'.format(stream, quality), shell=True)
            retry_num += 1
    except KeyboardInterrupt:
        print('Caught keyboard interrupt... exiting')
